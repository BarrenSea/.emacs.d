#+TITLE: Barrensea Emacs
#+AUTHOR: DonjuanPlatinum in Barrensea
#+DATE: 2024/6/22
#+STARTUP: overview
* key
** flycheck
| C-c C-c l | flycheck-list-errors | 显示错误列表 |
** basic
| C-c r | set-mark-command    | 选中 |
| C-c m | rectangle-mark-mode | 矩形选中 |
*** xref
| M . | xref-find-definitions | 跳转到引用的源代码处 |
| M , | xref-go-back          | 跳回去             |
| M ? | xref-find-references  | 列出所有的引用      |

** org
| M-o | 'org-insert-structure-template | 快速插入代码块 |
* init.el
:PROPERTIES:
:HEADER-ARGS: :tangle init.el
:END:
=init.el=
** 导入路径
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp/")
  (add-to-list 'load-path "~/.emacs.d/site-lisp/")
#+end_src

** 镜像设置
#+begin_src emacs-lisp
  (setq package-archives '(("gnu-mirror"   . "https://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
			   ("melpa-mirror"  . "https://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
			   ("nongnu-mirror" . "https://mirrors.tuna.tsinghua.edu.cn/elpa/nongnu/" )
			   ("org-mirror" . "https://mirrors.tuna.tsinghua.edu.cn/elpa/org/")
			   ))
#+end_src

** 配置导入
*** 变量
#+begin_src emacs-lisp
  ;; custom file
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+end_src
*** 常规
#+begin_src emacs-lisp
  ;; ibuffer配置
  (require 'init-ibuffer)

  ;; emacs自带默认模式设置
  (require 'default-set)

#+end_src
*** 输入法
#+begin_src emacs-lisp
  (require 'init-rime)
#+end_src
*** 模式
#+begin_src emacs-lisp

  ;; org-mode
  (require 'init-org)

  ;; markdown-mode
  (require 'init-markdown)

  ;; rust
  (require 'init-rust)

  ;; flycheck
  (require 'init-flycheck)

  ;; python
  (require 'init-python)

  ;; yaml
  (require 'init-yaml)
#+end_src
*** 功能
#+begin_src emacs-lisp
  ;; embark
  (require 'init-embark)
  ;; company
  (require 'init-company)
  ;; whichkey
  (require 'init-whichkey)
  ;; undo-tree
  (require 'init-undo-tree)
  ;; curx
  (require 'init-crux)
#+end_src
*** git
#+begin_src emacs-lisp
  (require 'init-git)
#+end_src
*** 外观
#+begin_src emacs-lisp
  ;; 主题设置
  (require 'init-theme)
  ;; 括号色彩
  (require 'init-rainbow)
#+end_src

*** 窗口
#+begin_src emacs-lisp
  (require 'init-ace-window)
  ;; treemacs
  (require 'init-treemacs)
#+end_src
** provide
#+begin_src emacs-lisp
  (provide 'init)
#+end_src
* custom.el
:PROPERTIES:
:HEADER-ARGS: :tangle custom.el :mkdirp yes
:END:

用户变量保存处

** rustic
#+begin_src emacs-lisp
  ;; rust-analyzer位置
  (setq rustic-analyzer-command '("~/.cargo/bin/rust-analyzer"))
  ;; lsp-client
  (setq rustic-lsp-client 'eglot)
#+end_src

** rime
#+begin_src emacs-lisp
  ;; 用户数据目录
  (setq rime-user-data-dir "~/.emacs.d/rime-data")
  ;; 共享目录
  (setq rime-share-data-dir "~/.config/fctix/rime-data")
#+end_src
** custom-set-face
#+begin_src emacs-lisp
  (custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(region ((t (:extend t :background "cornflowerblue" :foreground "#bebec4")))))
#+end_src

* lisp
** 通用配置
*** default-set.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/default-set.el :mkdirp yes
:END:

基本的配置

**** 代理
#+begin_src emacs-lisp
  
;; 使用代理
(setq my-proxy "127.0.0.1:7890")

  (defun show-proxy ()
    "Show http/https proxy."
    (interactive)
    (if url-proxy-services
	(message "Current proxy is \"%s\"" my-proxy)
      (message "No proxy")))
    (defun set-proxy ()
    "Set http/https proxy."
    (interactive)
    (setq url-proxy-services `(("http" . ,my-proxy)
			       ("https" . ,my-proxy)))
    (show-proxy))

  (defun unset-proxy ()
    "Unset http/https proxy."
    (interactive)
    (setq url-proxy-services nil)
    (show-proxy))

  (defun toggle-proxy ()
    "Toggle http/https proxy."
    (interactive)
    (if url-proxy-services
	(unset-proxy)
      (set-proxy)))

  (global-set-key (kbd "C-c p") 'toggle-proxy)

#+end_src

**** bind
#+begin_src emacs-lisp
  ;; set-mark-command bind
  (global-set-key (kbd "C-c r") 'set-mark-command)
  ;; 矩形操作
  (global-set-key (kbd "C-c m") 'rectangle-mark-mode)
#+end_src
**** 习惯更改
#+begin_src emacs-lisp
  ;; 自动替换选择区内容
  (delete-selection-mode 1)
#+end_src
**** 功能更改
#+begin_src emacs-lisp
  ;; 自动补全括号
  (electric-pair-mode 1)

  ;; 关闭提示音
  (setq ring-bell-function 'ignore)

  ;; 显示行号
  (global-display-line-numbers-mode 'open)
  (column-number-mode 1)

  ;; 关闭自动备份~文件
  (setq make-backup-files nil)
  (setq auto-save-default nil)


#+end_src
**** provide
#+begin_src emacs-lisp
  (provide 'default-set)
#+end_src
*** init-ibuffer.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-ibuffer.el :mkdirp yes
:END:
**** bind
#+begin_src emacs-lisp
  (global-unset-key (kbd "C-x C-b"))
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src
**** 配置
#+begin_src emacs-lisp
  ;; 不显示空组
  (setq ibuffer-show-empty-filter-groups nil)
#+end_src
**** ibuffer主体
#+begin_src emacs-lisp
  (setq ibuffer-saved-filter-groups
      '(("ibuffer"
	 ("rust"
	  (used-mode . rustic-mode))
	 ("org_note"
	  (used-mode . org-mode))
	 ("typst"
	  (used-mode . typst--markup-mode))
	 ("elisp"
	  (used-mode . emacs-lisp-mode))
	 ("haskell"
	  (used-mode . haskell-mode))
	 ("matrix"
	  (name . "Ement*"))
	 ("irc query"
	  (used-mode . circe-query-mode))
	 ("dired"
	  (used-mode . dired-mode))
	 ("conf"
	  (used-mode . conf-unix-mode))
	 ("toml"
	  (used-mode . conf-toml-mode))
	 ("markdown"
	  (used-mode . markdown-mode))
	 ("docker-compose"
	  (name . "docker-compose"))
	 ("message"
	  (used-mode . messages-buffer-mode))
	 ("magit"
	  (name . "magit*"))
	 ("special"
	  (used-mode . special-mode))
	 ("irc"
	  (used-mode . circe-channel-mode)))))
#+end_src
**** provide
#+begin_src emacs-lisp
  (provide 'init-ibuffer)
#+end_src
** 模式配置
*** init-company.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-company.el :mkdirp yes
:END:
~company~ 自动补全
**** company主体
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init (global-company-mode)
    :config
    (setq company-minimum-prefix-length 1) ;;一个字开始补全
    (setq company-show-quick-access t)
    (setq company-show-numbers t) ;;显示选项编号
    )
#+end_src

**** company-quickhelp
#+begin_src emacs-lisp
  ;; 提供上下文帮助
(use-package company-quickhelp
  :ensure t
  :hook (company-mode . company-quickhelp-mode)
  :config
  (setq company-quickhelp-delay 0.5))  ;; 设置帮助显示延迟
#+end_src
**** company拓展
***** nginx
#+begin_src emacs-lisp
  (use-package company-nginx
    :ensure t
  )
#+end_src
**** provide
#+begin_src emacs-lisp
  (provide 'init-company)
#+end_src
*** init-markdown.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-markdown.el :mkdirp yes
:END:
markdown

**** markdown主体
#+begin_src emacs-lisp
  ;; 安装 markdown-mode
(use-package markdown-mode
  :ensure t
  :mode ("\\.md\\'" "\\.markdown\\'")
  :commands (markdown-mode gfm-mode)
  :config
  (setq markdown-command "pandoc") ;; 可选：使用 pandoc 作为Markdown 渲染工具
  ;; 配置 Markdown 快捷键
  (bind-key "C-c C-c" 'markdown-command markdown-mode-map)
  
  ;; 自定义 Markdown 编辑器行为
  (setq markdown-fontify-code-blocks-natively t) ;; 高亮代码块
  (setq markdown-enable-math t) ;; 启用数学公式支持
  (setq markdown-hide-markup t)) ;; 隐藏标记符
#+end_src

**** markdown-preview
#+begin_src emacs-lisp
  (use-package markdown-preview-mode
  :ensure t
  :commands markdown-preview
  :config
  (setq markdown-preview-stylesheets
        '("~/.emacs.d/css/github-markdown.css"))
  )

#+end_src
**** provide
#+begin_src emacs-lisp
  (provide 'init-markdown)
#+end_src
*** init-org.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-org.el :mkdirp yes
:END:
*org-mode*

**** org主体
#+begin_src emacs-lisp
    (use-package org
    :ensure nil
    :mode ("\\.org\\'" . org-mode)
    :hook ((org-mode . visual-line-mode)
		   (org-mode . my/org-prettify-symbols))
    :commands (org-find-exact-headline-in-buffer org-set-tags)
    :custom-face
    ;; 设置Org mode标题以及每级标题行的大小
    (org-document-title ((t (:height 1.75 :weight bold))))
    (org-level-1 ((t (:height 1.2 :weight bold))))
    (org-level-2 ((t (:height 1.15 :weight bold))))
    (org-level-3 ((t (:height 1.1 :weight bold))))
    (org-level-4 ((t (:height 1.05 :weight bold))))
    (org-level-5 ((t (:height 1.0 :weight bold))))
    (org-level-6 ((t (:height 1.0 :weight bold))))
    (org-level-7 ((t (:height 1.0 :weight bold))))
    (org-level-8 ((t (:height 1.0 :weight bold))))
    (org-level-9 ((t (:height 1.0 :weight bold))))
    ;; 设置代码块用上下边线包裹
    (org-block-begin-line ((t (:underline t :background unspecified))))
    (org-block-end-line ((t (:overline t :underline nil :background unspecified))))
    :config
    ;; ================================
    ;; 在org mode里美化字符串
    ;; ================================
    (defun my/org-prettify-symbols ()
	  (setq prettify-symbols-alist
		    (mapcan (lambda (x) (list x (cons (upcase (car x)) (cdr x))))
				    '(
					  ;; ("[ ]"              . 9744)         ; ☐
					  ;; ("[X]"              . 9745)         ; ☑
					  ;; ("[-]"              . 8863)         ; ⊟
					  ("#+begin_src"      . 9998)         ; ✎
					  ("#+end_src"        . 9633)         ; □
					  ("#+begin_example"  . 129083)       ; 🠻
					  ("#+end_example"    . 129081)       ; 🠹
					  ("#+results:"       . 9776)         ; ☰
					  ;; ("#+attr_latex:"    . "🄛")
					  ;; ("#+attr_html:"     . "🄗")
					  ;; ("#+attr_org:"      . "🄞")
					  ;; ("#+name:"          . "🄝")         ; 127261
					  ;; ("#+caption:"       . "🄒")
					  ; 127250
					  ("#+date:"          . "📅")         ; 128197
					  ("#+author:"        . "💁")         ; 128100
					  ("#+setupfile:"     . 128221)       ; 📝
					  ("#+email:"         . 128231)       ; 📧
					  ("#+startup:"       . 10034)        ; ✲
					  ("#+options:"       . 9965)         ; ⛭
					  ("#+title:"         . 10162)        ; ➲
					  ("#+subtitle:"      . 11146)        ; ⮊
					  ("#+downloaded:"    . 8650)         ; ⇊
					  ("#+language:"      . 128441)       ; 🖹
					  ("#+begin_quote"    . 187)          ; »
					  ("#+end_quote"      . 171)          ; «
		      ("#+begin_results"  . 8943)         ; ⋯
		      ("#+end_results"    . 8943)         ; ⋯
					  )))
      (setq prettify-symbols-unprettify-at-point t)
	  (prettify-symbols-mode 1))

    ;; 提升latex预览的图片清晰度
    (plist-put org-format-latex-options :scale 1.8)

    ;; 设置标题行之间总是有空格；列表之间根据情况自动加空格
    (setq org-blank-before-new-entry '((heading . t)
									   (plain-list-item . auto)
    :custom
    ;; 启用一些子模块
    (org-modules '(ol-bibtex ol-gnus ol-info ol-eww org-habit org-protocol))
    ;; 在按M-RET时，是否根据光标所在的位置分行，这里设置为是
    ;; (org-M-RET-may-split-line '((default . nil)))
    ;; 一些Org mode自带的美化设置
    ;; 标题行美化
    (org-fontify-whole-heading-line t)
    ;; 设置标题行折叠符号
    (org-ellipsis " ▾")
    ;; 在活动区域内的所有标题栏执行某些命令
    (org-loop-over-headlines-in-active-region t)
    ;; TODO标签美化
    (org-fontify-todo-headline t)
    ;; DONE标签美化
    (org-fontify-done-headline t)
    ;; 引用块美化
    (org-fontify-quote-and-verse-blocks t)
    ;; 隐藏宏标记
    (org-hide-macro-markers t)
    ;; 隐藏强调标签
    (org-hide-emphasis-markers t)
    ;; 高亮latex语法
    (org-highlight-latex-and-related '(native script entities))
    ;; 以UTF-8显示
    (org-pretty-entities t)
    ;; 是否隐藏标题栏的前置星号，这里我们通过org-modern来隐藏
    ;; (org-hide-leading-stars t)
    ;; 当启用缩进模式时自动隐藏前置星号
    (org-indent-mode-turns-on-hiding-stars t)
    ;; 自动启用缩进
    (org-startup-indented nil)
    ;; 根据标题栏自动缩进文本
    (org-adapt-indentation nil)
    ;; 自动显示图片
    (org-startup-with-inline-images t)
    ;; 默认以Overview的模式展示标题行
    (org-startup-folded 'overview)
    ;; 允许字母列表
    (org-list-allow-alphabetical t)
    ;; 列表的下一级设置
    (org-list-demote-modify-bullet '(
								     ("-"  . "+")
				     ("+"  . "1.")
								     ("1." . "a.")
								     ))
    ;; 编辑时检查是否在折叠的不可见区域
    (org-fold-catch-invisible-edits 'smart)
    ;; 在当前位置插入新标题行还是在当前标题行后插入，这里设置为当前位置
    (org-insert-heading-respect-content nil)
    ;; 设置图片的最大宽度，如果有imagemagick支持将会改变图片实际宽度
    ;; 四种设置方法：(1080), 1080, t, nil
    (org-image-actual-width nil)
    ;; imenu的最大深度，默认为2
    (org-imenu-depth 4)
    ;; 回车要不要触发链接，这里设置不触发
    (org-return-follows-link nil)
    ;; 上标^下标_是否需要特殊字符包裹，这里设置需要用大括号包裹
    (org-use-sub-superscripts '{})
    ;; 复制粘贴标题行的时候删除id
    (org-clone-delete-id t)
    ;; 粘贴时调整标题行的级别
    (org-yank-adjusted-subtrees t)

    ;; TOOD的关键词设置，可以设置不同的组
    (org-todo-keywords '((sequence "TODO(t)" "HOLD(h!)" "WIP(i!)" "WAIT(w!)" "|" "DONE(d!)" "CANCELLED(c@/!)")
					     (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f!)")))
    ;; TODO关键词的样式设置
    (org-todo-keyword-faces '(("TODO"       :foreground "#7c7c75" :weight bold)
							  ("HOLD"       :foreground "#feb24c" :weight bold)
							  ("WIP"        :foreground "#0098dd" :weight bold)
							  ("WAIT"       :foreground "#9f7efe" :weight bold)
							  ("DONE"       :foreground "#50a14f" :weight bold)
							  ("CANCELLED"  :foreground "#ff6480" :weight bold)
							  ("REPORT"     :foreground "magenta" :weight bold)
							  ("BUG"        :foreground "red"     :weight bold)
							  ("KNOWNCAUSE" :foreground "yellow"  :weight bold)
							  ("FIXED"      :foreground "green"   :weight bold)))
    ;; 当标题行状态变化时标签同步发生的变化
    ;; Moving a task to CANCELLED adds a CANCELLED tag
    ;; Moving a task to WAIT adds a WAIT tag
    ;; Moving a task to HOLD adds WAIT and HOLD tags
    ;; Moving a task to a done state removes WAIT and HOLD tags
    ;; Moving a task to TODO removes WAIT, CANCELLED, and HOLD tags
    ;; Moving a task to DONE removes WAIT, CANCELLED, and HOLD tags
    (org-todo-state-tags-triggers
     (quote (("CANCELLED" ("CANCELLED" . t))
		     ("WAIT" ("WAIT" . t))
		     ("HOLD" ("WAIT") ("HOLD" . t))
		     (done ("WAIT") ("HOLD"))
		     ("TODO" ("WAIT") ("CANCELLED") ("HOLD"))
		     ("DONE" ("WAIT") ("CANCELLED") ("HOLD")))))
    ;; 使用专家模式选择标题栏状态
    (org-use-fast-todo-selection 'expert)
    ;; 父子标题栏状态有依赖
    (org-enforce-todo-dependencies t)
    ;; 标题栏和任务复选框有依赖
    (org-enforce-todo-checkbox-dependencies t)
    ;; 优先级样式设置
    (org-priority-faces '((?A :foreground "red")
						  (?B :foreground "orange")
						  (?C :foreground "yellow")))
    ;; 标题行全局属性设置
    (org-global-properties '(("EFFORT_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00")
						     ("APPT_WARNTIME_ALL" . "0 5 10 15 20 25 30 45 60")
						     ("RISK_ALL" . "Low Medium High")
						     ("STYLE_ALL" . "habit")))
    ;; Org columns的默认格式
    (org-columns-default-format "%25ITEM %TODO %SCHEDULED %DEADLINE %3PRIORITY %TAGS %CLOCKSUM %EFFORT{:}")
    ;; 当状态从DONE改成其他状态时，移除 CLOSED: [timestamp]
    (org-closed-keep-when-no-todo t)
    ;; DONE时加上时间戳
    (org-log-done 'time)
    ;; 重复执行时加上时间戳
    (org-log-repeat 'time)
    ;; Deadline修改时加上一条记录
    (org-log-redeadline 'note)
    ;; Schedule修改时加上一条记录
    (org-log-reschedule 'note)
    ;; 以抽屉的方式记录
    (org-log-into-drawer t)
    ;; 紧接着标题行或者计划/截止时间戳后加上记录抽屉
    (org-log-state-notes-insert-after-drawers nil)

    ;; refile使用缓存
    (org-refile-use-cache t)
    ;; refile的目的地，这里设置的是agenda文件的所有标题
    (org-refile-targets '((org-agenda-files . (:maxlevel . 9))))
    ;; 将文件名加入到路径
    (org-refile-use-outline-path 'file)
    ;; 是否按步骤refile
    (org-outline-path-complete-in-steps nil)
    ;; 允许创建新的标题行，但需要确认
    (org-refile-allow-creating-parent-nodes 'confirm)

    ;; 设置标签的默认位置，默认是第77列右对齐
    ;; (org-tags-column -77)
    ;; 自动对齐标签
    (org-auto-align-tags t)
    ;; 标签不继承
    (org-use-tag-inheritance nil)
    ;; 在日程视图的标签不继承
    (org-agenda-use-tag-inheritance nil)
    ;; 标签快速选择
    (org-use-fast-tag-selection t)
    ;; 标签选择不需要回车确认
    (org-fast-tag-selection-single-key t)
    ;; 定义了有序属性的标题行也加上 OREDERD 标签
    (org-track-ordered-property-with-tag t)
    ;; 始终存在的的标签
    (org-tag-persistent-alist '(("read"     . ?r)
							    ("mail"     . ?m)
							    ("emacs"    . ?e)
							    ("study"    . ?s)
							    ("work"     . ?w)))
    ;; 预定义好的标签
    (org-tag-alist '((:startgroup)
				     ("crypt"    . ?c)
				     ("linux"    . ?l)
				     ("apple"    . ?a)
				     ("noexport" . ?n)
				     ("ignore"   . ?i)
				     ("TOC"      . ?t)
				     (:endgroup)))

    ;; 归档设置
    (org-archive-location "%s_archive::datetree/")
    )))
#+end_src

**** org-modern
#+begin_src emacs-lisp
  (use-package org-modern
  :ensure t
  :hook (after-init . (lambda ()
                        (setq org-modern-hide-stars 'leading)
                        (global-org-modern-mode t)))
  :config
  ;; 标题行型号字符
  (setq org-modern-star ["◉" "○" "✸" "✳" "◈" "◇" "✿" "❀" "✜"])
  ;; 额外的行间距，0.1表示10%，1表示1px
  (setq-default line-spacing 0.1)
  ;; tag边框宽度，还可以设置为 `auto' 即自动计算
  (setq org-modern-label-border 1)
  ;; 设置表格竖线宽度，默认为3
  (setq org-modern-table-vertical 2)
  ;; 设置表格横线为0，默认为0.1
  (setq org-modern-table-horizontal 0)
  ;; 复选框美化
  (setq org-modern-checkbox
        '((?X . #("▢✓" 0 2 (composition ((2)))))
          (?- . #("▢–" 0 2 (composition ((2)))))
          (?\s . #("▢" 0 1 (composition ((1)))))))
  ;; 列表符号美化
  (setq org-modern-list
        '((?- . "•")
          (?+ . "◦")
          (?* . "▹")))
  ;; 代码块左边加上一条竖边线（需要Org mode顶头，如果启用了 `visual-fill-column-mode' 会很难看）
  (setq org-modern-block-fringe t)
  ;; 代码块类型美化，我们使用了 `prettify-symbols-mode'
  (setq org-modern-block-name nil)
  ;; #+关键字美化，我们使用了 `prettify-symbols-mode'
  (setq org-modern-keyword nil)
  )
#+end_src

**** org-appear
自动展开
#+begin_src emacs-lisp
  (use-package org-appear
  :ensure t
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autolinks t)
  (setq org-appear-autosubmarkers t)
  (setq org-appear-autoentities t)
  (setq org-appear-autokeywords t)
  (setq org-appear-inside-latex t)
  )
#+end_src
**** org-contrib
#+begin_src emacs-lisp
  ;; Org mode的附加包，有诸多附加功能
  (use-package org-contrib
    :ensure t)
#+end_src

**** org-download
#+begin_src emacs-lisp
  ;; 粘贴图片到org mode
(use-package org-download
  :ensure t
  :defer t ;; 延迟加载
  :bind
  (:map org-mode-map
        ("C-M-y" . org-download-clipboard)) ;; 绑定从剪贴版粘贴截图的快捷键
  :custom
  (org-download-heading-lvl 1) ;; 用一级标题给截图文件命名
  :config
  (setq-default org-download-image-dir "./imgs")) ;; 用同级 ./img 目录放置截图文件
(add-hook 'dired-mode-hook 'org-download-enable)

#+end_src
**** org-fragtog
#+begin_src emacs-lisp
  
;; 显示latex公式
(use-package org-fragtog
  :ensure t
  :hook
  (org-mode . org-fragtog-mode)
  )
#+end_src
**** export
***** ox-gfm
导出markdown
#+begin_src emacs-lisp
  (use-package ox-gfm
  :ensure t
  :after ox)
#+end_src
**** insert
#+begin_src emacs-lisp
  (global-set-key (kbd "M-o") 'org-insert-structure-template)
#+end_src
**** src
#+begin_src emacs-lisp
  ;; 代码块高亮
  (setq org-src-fontify-natively t)
#+end_src

**** org-publish
#+begin_src emacs-lisp
  (use-package ox-publish
  :ensure nil
  :commands (org-publish org-publish-all)
  :config
  (setq org-export-global-macros
      '(("timestamp" . "@@html:<span class=\"timestamp\">[$1]</span>@@")))

  ;; sitemap 生成函数
  (defun my/org-sitemap-date-entry-format (entry style project)
    "Format ENTRY in org-publish PROJECT Sitemap format ENTRY ENTRY STYLE format that includes date."
    (let ((filename (org-publish-find-title entry project)))
      (if (= (length filename) 0)
          (format "*%s*" entry)
        (format "{{{timestamp(%s)}}} [[file:%s][%s]]"
                (format-time-string "%Y-%m-%d"
                                    (org-publish-find-date entry project))
                entry
                filename))))

  ;; 设置 org-publish 的项目列表
  (setq org-publish-project-alist
        '(
          ;; 笔记部分
          ("org-notes"
           :base-directory "~/org/"
           :base-extension "org"
           :exclude "\\(tasks\\|test\\|scratch\\|diary\\|capture\\|mail\\|habits\\|resume\\|meetings\\|personal\\|org-beamer-example\\)\\.org\\|test\\|article\\|roam\\|hugo"
           :publishing-directory "~/public_html/"
           :recursive t                 ; include subdirectories if t
           :publishing-function org-html-publish-to-html
           :headline-levels 6
           :auto-preamble t
           :auto-sitemap t
           :sitemap-filename "sitemap.org"
           :sitemap-title "Sitemap"
           :sitemap-format-entry my/org-sitemap-date-entry-format)

          ;; 静态资源部分
          ("org-static"
           :base-directory "~/org/"
           :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|mov"
           :publishing-directory "~/public_html/"
           :recursive t
           :publishing-function org-publish-attachment)

          ;; 项目集合
          ("org"
           :components ("org-notes" "org-static"))
          ))
  )
#+end_src
**** provide
#+begin_src emacs-lisp
  (provide 'init-org)
#+end_src
*** init-polymode.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-polymode.el :mkdirp yes
:END:
poly
**** 主体
#+begin_src emacs-lisp
  (use-package polymode
    :ensure t)
#+end_src
**** provide
#+begin_src emacs-lisp
  (provide 'init-polymode)
#+end_src
*** init-rust.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-rust.el :mkdirp yes
:END:
rust
**** rustic
#+begin_src emacs-lisp
  (use-package rustic
  :ensure t)
  
#+end_src
**** provide
#+begin_src emacs-lisp
  (provide 'init-rust)
#+end_src
*** init-flycheck.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-flycheck.el :mkdirp yes
:END:
**** flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (setq truncate-lines nil) ;自动换行
    :init (global-flycheck-mode)
    )
#+end_src
**** flycheck-rust
#+begin_src emacs-lisp
  (use-package flycheck-rust
  :ensure t
  )
#+end_src
**** provide
#+begin_src emacs-lisp
  (provide 'init-flycheck)
#+end_src

*** init-python.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-python.el :mkdirp yes
:END:

**** python-mode
#+begin_src emacs-lisp
  (use-package python-mode
  :ensure t
  )
#+end_src

**** provide
#+begin_src emacs-lisp
  (provide 'init-python)
#+end_src

*** init-yaml.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-yaml.el :mkdirp yes
:END:

**** yaml-mode
#+begin_src emacs-lisp
    (use-package yaml-mode
      :ensure t)
#+end_src

**** provide
#+begin_src emacs-lisp
  (provide 'init-yaml)
#+end_src
** 输入法
*** init-rime.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-rime.el :mkdirp yes
:END:
rime输入法 输入法在rime分支
**** popup
#+begin_src emacs-lisp
  ;; popup
  (use-package popup
    :ensure t
    )
#+end_src

**** rime主体
#+begin_src emacs-lisp
  (use-package rime
  :ensure t
  :custom
  (default-input-method "rime")
  (rime-show-candidate 'popup)
  )
#+end_src
**** provide
#+begin_src emacs-lisp
  (provide 'init-rime)
#+end_src
** 窗口配置
*** init-ace-window.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-ace-window.el :mkdirp yes
:END:
窗口编号
**** ace-window主体
#+begin_src emacs-lisp
  (use-package ace-window
  :ensure t
  :bind
  ("C-x o" . ace-window)
  )
#+end_src

**** provide
#+begin_src emacs-lisp
  (provide 'init-ace-window)
#+end_src

*** init-treemacs.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-treemacs.el :mkdirp yes
:END:

**** treemacs
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t)
  (use-package treemacs
  :ensure t
  :config
  :config
  (treemacs-tag-follow-mode)
  :bind
  (:map global-map
	("M-\-" . treemacs-select-window)
	("C-x t 1" . treemacs-delete-other-windows)
	("C-x t t" . treemacs)
	("C-x t B" . treemacs-bookmark)
	("C-x t M-t" . treemacs-find-tag)
	)
  (:map treemacs-mode-map
	("/" . treemacs-advanced-helpful-hydra)
	)
  )
#+end_src

**** provide
#+begin_src emacs-lisp
  (provide 'init-treemacs)
#+end_src
** 功能配置
*** init-embark.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-embark.el :mkdirp yes
:END:
~embark~
**** embark主体
#+begin_src emacs-lisp
(use-package marginalia
  :ensure t
  :config
  (marginalia-mode))

(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
;;  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc. You may adjust the
  ;; Eldoc strategy, if you want to see the documentation from
  ;; multiple providers. Beware that using this can be a little
  ;; jarring since the message shown in the minibuffer can be more
  ;; than one line, causing the modeline to move up and down:

  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))


#+end_src
**** provide
#+begin_src emacs-lisp
  (provide 'init-embark)
#+end_src

*** init-whichkey.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-whichkey.el :mkdirp yes
:END:
**** whichkey
#+begin_src emacs-lisp
  (use-package which-key
  :ensure t
  :init (which-key-mode)
  )
#+end_src
**** provide
#+begin_src emacs-lisp
  (provide 'init-whichkey)
#+end_src

*** init-undo-tree.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-undo-tree.el :mkdirp yes
:END:

**** undo-tree
#+begin_src emacs-lisp
  (use-package undo-tree
  :ensure t
  :hook (after-init . global-undo-tree-mode)
  :config
  ;; don't save undo history to local files
  (setq undo-tree-auto-save-history nil)
  )
#+end_src
**** provide
#+begin_src emacs-lisp
  (provide 'init-undo-tree)
#+end_src

*** init-crux.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-crux.el :mkdirp yes
:END:
移动增强 删除增强等
**** crux
#+begin_src emacs-lisp
(use-package crux
  :ensure t
  :bind (("C-a" . crux-move-beginning-of-line)
         ("C-x 4 t" . crux-transpose-windows)
         ("C-x K" . crux-kill-other-buffers)
         ("C-k" . crux-smart-kill-line)
         ("C-x DEL" . crux-kill-line-backwards))
  :config
  (crux-with-region-or-buffer indent-region)
  (crux-with-region-or-buffer untabify)
  (crux-with-region-or-point-to-eol kill-ring-save)
  (defalias 'rename-file-and-buffer #'crux-rename-file-and-buffer))  
#+end_src
**** provide
#+begin_src emacs-lisp
  (provide 'init-crux)
#+end_src
** git配置
*** init-git.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-git.el :mkdirp yes
:END:
~git~
**** magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src
**** git-gutter
#+begin_src emacs-lisp
  (use-package git-gutter
    :ensure t
    :config (global-git-gutter-mode +1))
#+end_src
**** balmer
#+begin_src emacs-lisp
  (use-package blamer
  :ensure t
  :defer 20
  :custom
  (blamer-idle-time 1) ; 延迟时间
  (blamer-min-offset 70)
  :custom-face
  (blamer-face ((t :foreground "#7a88cf"
		    :background nil
		    :height 100
		    :italic t)))
  :config
  (global-blamer-mode 1))
#+end_src
**** provide
#+begin_src emacs-lisp
  (provide 'init-git)
#+end_src
** 外观
*** init-theme.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-theme.el :mkdirp yes
:END:
主题设置
**** kaolin-themes
#+begin_src emacs-lisp
  (use-package kaolin-themes
    :ensure t
    :config
    (load-theme 'kaolin-dark t)
    (kaolin-treemacs-theme))
#+end_src
**** provide
#+begin_src emacs-lisp
  (provide 'init-theme)
#+end_src



*** init-rainbow.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-rainbow.el :mkdirp yes
:END:
彩虹括号
**** rainbow
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

**** provide
#+begin_src emacs-lisp
  (provide 'init-rainbow)
#+end_src

* css
** markdown

*** github-markdown
:PROPERTIES:
:HEADER-ARGS: :tangle css/github-markdown.css :mkdirp yes
:END:
#+begin_src css
  .markdown-body {
  --base-size-4: 0.25rem;
  --base-size-8: 0.5rem;
  --base-size-16: 1rem;
  --base-text-weight-normal: 400;
  --base-text-weight-medium: 500;
  --base-text-weight-semibold: 600;
  --fontStack-monospace: ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace;
}

@media (prefers-color-scheme: dark) {
  .markdown-body,
  [data-theme="dark"] {
    /*dark*/
    color-scheme: dark;
    --focus-outlineColor: #1f6feb;
    --fgColor-default: #e6edf3;
    --fgColor-muted: #8d96a0;
    --fgColor-accent: #4493f8;
    --fgColor-success: #3fb950;
    --fgColor-attention: #d29922;
    --fgColor-danger: #f85149;
    --fgColor-done: #ab7df8;
    --bgColor-default: #0d1117;
    --bgColor-muted: #161b22;
    --bgColor-neutral-muted: #6e768166;
    --bgColor-attention-muted: #bb800926;
    --borderColor-default: #30363d;
    --borderColor-muted: #30363db3;
    --borderColor-neutral-muted: #6e768166;
    --borderColor-accent-emphasis: #1f6feb;
    --borderColor-success-emphasis: #238636;
    --borderColor-attention-emphasis: #9e6a03;
    --borderColor-danger-emphasis: #da3633;
    --borderColor-done-emphasis: #8957e5;
    --color-prettylights-syntax-comment: #8b949e;
    --color-prettylights-syntax-constant: #79c0ff;
    --color-prettylights-syntax-constant-other-reference-link: #a5d6ff;
    --color-prettylights-syntax-entity: #d2a8ff;
    --color-prettylights-syntax-storage-modifier-import: #c9d1d9;
    --color-prettylights-syntax-entity-tag: #7ee787;
    --color-prettylights-syntax-keyword: #ff7b72;
    --color-prettylights-syntax-string: #a5d6ff;
    --color-prettylights-syntax-variable: #ffa657;
    --color-prettylights-syntax-brackethighlighter-unmatched: #f85149;
    --color-prettylights-syntax-brackethighlighter-angle: #8b949e;
    --color-prettylights-syntax-invalid-illegal-text: #f0f6fc;
    --color-prettylights-syntax-invalid-illegal-bg: #8e1519;
    --color-prettylights-syntax-carriage-return-text: #f0f6fc;
    --color-prettylights-syntax-carriage-return-bg: #b62324;
    --color-prettylights-syntax-string-regexp: #7ee787;
    --color-prettylights-syntax-markup-list: #f2cc60;
    --color-prettylights-syntax-markup-heading: #1f6feb;
    --color-prettylights-syntax-markup-italic: #c9d1d9;
    --color-prettylights-syntax-markup-bold: #c9d1d9;
    --color-prettylights-syntax-markup-deleted-text: #ffdcd7;
    --color-prettylights-syntax-markup-deleted-bg: #67060c;
    --color-prettylights-syntax-markup-inserted-text: #aff5b4;
    --color-prettylights-syntax-markup-inserted-bg: #033a16;
    --color-prettylights-syntax-markup-changed-text: #ffdfb6;
    --color-prettylights-syntax-markup-changed-bg: #5a1e02;
    --color-prettylights-syntax-markup-ignored-text: #c9d1d9;
    --color-prettylights-syntax-markup-ignored-bg: #1158c7;
    --color-prettylights-syntax-meta-diff-range: #d2a8ff;
    --color-prettylights-syntax-sublimelinter-gutter-mark: #484f58;
  }
}

@media (prefers-color-scheme: light) {
  .markdown-body,
  [data-theme="light"] {
    /*light*/
    color-scheme: light;
    --focus-outlineColor: #0969da;
    --fgColor-default: #1f2328;
    --fgColor-muted: #636c76;
    --fgColor-accent: #0969da;
    --fgColor-success: #1a7f37;
    --fgColor-attention: #9a6700;
    --fgColor-danger: #d1242f;
    --fgColor-done: #8250df;
    --bgColor-default: #ffffff;
    --bgColor-muted: #f6f8fa;
    --bgColor-neutral-muted: #afb8c133;
    --bgColor-attention-muted: #fff8c5;
    --borderColor-default: #d0d7de;
    --borderColor-muted: #d0d7deb3;
    --borderColor-neutral-muted: #afb8c133;
    --borderColor-accent-emphasis: #0969da;
    --borderColor-success-emphasis: #1a7f37;
    --borderColor-attention-emphasis: #bf8700;
    --borderColor-danger-emphasis: #cf222e;
    --borderColor-done-emphasis: #8250df;
    --color-prettylights-syntax-comment: #57606a;
    --color-prettylights-syntax-constant: #0550ae;
    --color-prettylights-syntax-constant-other-reference-link: #0a3069;
    --color-prettylights-syntax-entity: #6639ba;
    --color-prettylights-syntax-storage-modifier-import: #24292f;
    --color-prettylights-syntax-entity-tag: #0550ae;
    --color-prettylights-syntax-keyword: #cf222e;
    --color-prettylights-syntax-string: #0a3069;
    --color-prettylights-syntax-variable: #953800;
    --color-prettylights-syntax-brackethighlighter-unmatched: #82071e;
    --color-prettylights-syntax-brackethighlighter-angle: #57606a;
    --color-prettylights-syntax-invalid-illegal-text: #f6f8fa;
    --color-prettylights-syntax-invalid-illegal-bg: #82071e;
    --color-prettylights-syntax-carriage-return-text: #f6f8fa;
    --color-prettylights-syntax-carriage-return-bg: #cf222e;
    --color-prettylights-syntax-string-regexp: #116329;
    --color-prettylights-syntax-markup-list: #3b2300;
    --color-prettylights-syntax-markup-heading: #0550ae;
    --color-prettylights-syntax-markup-italic: #24292f;
    --color-prettylights-syntax-markup-bold: #24292f;
    --color-prettylights-syntax-markup-deleted-text: #82071e;
    --color-prettylights-syntax-markup-deleted-bg: #ffebe9;
    --color-prettylights-syntax-markup-inserted-text: #116329;
    --color-prettylights-syntax-markup-inserted-bg: #dafbe1;
    --color-prettylights-syntax-markup-changed-text: #953800;
    --color-prettylights-syntax-markup-changed-bg: #ffd8b5;
    --color-prettylights-syntax-markup-ignored-text: #eaeef2;
    --color-prettylights-syntax-markup-ignored-bg: #0550ae;
    --color-prettylights-syntax-meta-diff-range: #8250df;
    --color-prettylights-syntax-sublimelinter-gutter-mark: #8c959f;
  }
}

.markdown-body {
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  margin: 0;
  color: var(--fgColor-default);
  background-color: var(--bgColor-default);
  font-family: -apple-system,BlinkMacSystemFont,"Segoe UI","Noto Sans",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji";
  font-size: 16px;
  line-height: 1.5;
  word-wrap: break-word;
  scroll-behavior: auto;
}

.markdown-body .octicon {
  display: inline-block;
  fill: currentColor;
  vertical-align: text-bottom;
}

.markdown-body h1:hover .anchor .octicon-link:before,
.markdown-body h2:hover .anchor .octicon-link:before,
.markdown-body h3:hover .anchor .octicon-link:before,
.markdown-body h4:hover .anchor .octicon-link:before,
.markdown-body h5:hover .anchor .octicon-link:before,
.markdown-body h6:hover .anchor .octicon-link:before {
  width: 16px;
  height: 16px;
  content: ' ';
  display: inline-block;
  background-color: currentColor;
  -webkit-mask-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' version='1.1' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg>");
  mask-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' version='1.1' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg>");
}

.markdown-body details,
.markdown-body figcaption,
.markdown-body figure {
  display: block;
}

.markdown-body summary {
  display: list-item;
}

.markdown-body [hidden] {
  display: none !important;
}

.markdown-body a {
  background-color: transparent;
  color: var(--fgColor-accent);
  text-decoration: none;
}

.markdown-body abbr[title] {
  border-bottom: none;
  -webkit-text-decoration: underline dotted;
  text-decoration: underline dotted;
}

.markdown-body b,
.markdown-body strong {
  font-weight: var(--base-text-weight-semibold, 600);
}

.markdown-body dfn {
  font-style: italic;
}

.markdown-body h1 {
  margin: .67em 0;
  font-weight: var(--base-text-weight-semibold, 600);
  padding-bottom: .3em;
  font-size: 2em;
  border-bottom: 1px solid var(--borderColor-muted);
}

.markdown-body mark {
  background-color: var(--bgColor-attention-muted);
  color: var(--fgColor-default);
}

.markdown-body small {
  font-size: 90%;
}

.markdown-body sub,
.markdown-body sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

.markdown-body sub {
  bottom: -0.25em;
}

.markdown-body sup {
  top: -0.5em;
}

.markdown-body img {
  border-style: none;
  max-width: 100%;
  box-sizing: content-box;
  background-color: var(--bgColor-default);
}

.markdown-body code,
.markdown-body kbd,
.markdown-body pre,
.markdown-body samp {
  font-family: monospace;
  font-size: 1em;
}

.markdown-body figure {
  margin: 1em 40px;
}

.markdown-body hr {
  box-sizing: content-box;
  overflow: hidden;
  background: transparent;
  border-bottom: 1px solid var(--borderColor-muted);
  height: .25em;
  padding: 0;
  margin: 24px 0;
  background-color: var(--borderColor-default);
  border: 0;
}

.markdown-body input {
  font: inherit;
  margin: 0;
  overflow: visible;
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
}

.markdown-body [type=button],
.markdown-body [type=reset],
.markdown-body [type=submit] {
  -webkit-appearance: button;
  appearance: button;
}

.markdown-body [type=checkbox],
.markdown-body [type=radio] {
  box-sizing: border-box;
  padding: 0;
}

.markdown-body [type=number]::-webkit-inner-spin-button,
.markdown-body [type=number]::-webkit-outer-spin-button {
  height: auto;
}

.markdown-body [type=search]::-webkit-search-cancel-button,
.markdown-body [type=search]::-webkit-search-decoration {
  -webkit-appearance: none;
  appearance: none;
}

.markdown-body ::-webkit-input-placeholder {
  color: inherit;
  opacity: .54;
}

.markdown-body ::-webkit-file-upload-button {
  -webkit-appearance: button;
  appearance: button;
  font: inherit;
}

.markdown-body a:hover {
  text-decoration: underline;
}

.markdown-body ::placeholder {
  color: var(--fgColor-muted);
  opacity: 1;
}

.markdown-body hr::before {
  display: table;
  content: "";
}

.markdown-body hr::after {
  display: table;
  clear: both;
  content: "";
}

.markdown-body table {
  border-spacing: 0;
  border-collapse: collapse;
  display: block;
  width: max-content;
  max-width: 100%;
  overflow: auto;
}

.markdown-body td,
.markdown-body th {
  padding: 0;
}

.markdown-body details summary {
  cursor: pointer;
}

.markdown-body details:not([open])>*:not(summary) {
  display: none;
}

.markdown-body a:focus,
.markdown-body [role=button]:focus,
.markdown-body input[type=radio]:focus,
.markdown-body input[type=checkbox]:focus {
  outline: 2px solid var(--focus-outlineColor);
  outline-offset: -2px;
  box-shadow: none;
}

.markdown-body a:focus:not(:focus-visible),
.markdown-body [role=button]:focus:not(:focus-visible),
.markdown-body input[type=radio]:focus:not(:focus-visible),
.markdown-body input[type=checkbox]:focus:not(:focus-visible) {
  outline: solid 1px transparent;
}

.markdown-body a:focus-visible,
.markdown-body [role=button]:focus-visible,
.markdown-body input[type=radio]:focus-visible,
.markdown-body input[type=checkbox]:focus-visible {
  outline: 2px solid var(--focus-outlineColor);
  outline-offset: -2px;
  box-shadow: none;
}

.markdown-body a:not([class]):focus,
.markdown-body a:not([class]):focus-visible,
.markdown-body input[type=radio]:focus,
.markdown-body input[type=radio]:focus-visible,
.markdown-body input[type=checkbox]:focus,
.markdown-body input[type=checkbox]:focus-visible {
  outline-offset: 0;
}

.markdown-body kbd {
  display: inline-block;
  padding: 3px 5px;
  font: 11px var(--fontStack-monospace, ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace);
  line-height: 10px;
  color: var(--fgColor-default);
  vertical-align: middle;
  background-color: var(--bgColor-muted);
  border: solid 1px var(--borderColor-neutral-muted);
  border-bottom-color: var(--borderColor-neutral-muted);
  border-radius: 6px;
  box-shadow: inset 0 -1px 0 var(--borderColor-neutral-muted);
}

.markdown-body h1,
.markdown-body h2,
.markdown-body h3,
.markdown-body h4,
.markdown-body h5,
.markdown-body h6 {
  margin-top: 24px;
  margin-bottom: 16px;
  font-weight: var(--base-text-weight-semibold, 600);
  line-height: 1.25;
}

.markdown-body h2 {
  font-weight: var(--base-text-weight-semibold, 600);
  padding-bottom: .3em;
  font-size: 1.5em;
  border-bottom: 1px solid var(--borderColor-muted);
}

.markdown-body h3 {
  font-weight: var(--base-text-weight-semibold, 600);
  font-size: 1.25em;
}

.markdown-body h4 {
  font-weight: var(--base-text-weight-semibold, 600);
  font-size: 1em;
}

.markdown-body h5 {
  font-weight: var(--base-text-weight-semibold, 600);
  font-size: .875em;
}

.markdown-body h6 {
  font-weight: var(--base-text-weight-semibold, 600);
  font-size: .85em;
  color: var(--fgColor-muted);
}

.markdown-body p {
  margin-top: 0;
  margin-bottom: 10px;
}

.markdown-body blockquote {
  margin: 0;
  padding: 0 1em;
  color: var(--fgColor-muted);
  border-left: .25em solid var(--borderColor-default);
}

.markdown-body ul,
.markdown-body ol {
  margin-top: 0;
  margin-bottom: 0;
  padding-left: 2em;
}

.markdown-body ol ol,
.markdown-body ul ol {
  list-style-type: lower-roman;
}

.markdown-body ul ul ol,
.markdown-body ul ol ol,
.markdown-body ol ul ol,
.markdown-body ol ol ol {
  list-style-type: lower-alpha;
}

.markdown-body dd {
  margin-left: 0;
}

.markdown-body tt,
.markdown-body code,
.markdown-body samp {
  font-family: var(--fontStack-monospace, ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace);
  font-size: 12px;
}

.markdown-body pre {
  margin-top: 0;
  margin-bottom: 0;
  font-family: var(--fontStack-monospace, ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace);
  font-size: 12px;
  word-wrap: normal;
}

.markdown-body .octicon {
  display: inline-block;
  overflow: visible !important;
  vertical-align: text-bottom;
  fill: currentColor;
}

.markdown-body input::-webkit-outer-spin-button,
.markdown-body input::-webkit-inner-spin-button {
  margin: 0;
  -webkit-appearance: none;
  appearance: none;
}

.markdown-body .mr-2 {
  margin-right: var(--base-size-8, 8px) !important;
}

.markdown-body::before {
  display: table;
  content: "";
}

.markdown-body::after {
  display: table;
  clear: both;
  content: "";
}

.markdown-body>*:first-child {
  margin-top: 0 !important;
}

.markdown-body>*:last-child {
  margin-bottom: 0 !important;
}

.markdown-body a:not([href]) {
  color: inherit;
  text-decoration: none;
}

.markdown-body .absent {
  color: var(--fgColor-danger);
}

.markdown-body .anchor {
  float: left;
  padding-right: 4px;
  margin-left: -20px;
  line-height: 1;
}

.markdown-body .anchor:focus {
  outline: none;
}

.markdown-body p,
.markdown-body blockquote,
.markdown-body ul,
.markdown-body ol,
.markdown-body dl,
.markdown-body table,
.markdown-body pre,
.markdown-body details {
  margin-top: 0;
  margin-bottom: 16px;
}

.markdown-body blockquote>:first-child {
  margin-top: 0;
}

.markdown-body blockquote>:last-child {
  margin-bottom: 0;
}

.markdown-body h1 .octicon-link,
.markdown-body h2 .octicon-link,
.markdown-body h3 .octicon-link,
.markdown-body h4 .octicon-link,
.markdown-body h5 .octicon-link,
.markdown-body h6 .octicon-link {
  color: var(--fgColor-default);
  vertical-align: middle;
  visibility: hidden;
}

.markdown-body h1:hover .anchor,
.markdown-body h2:hover .anchor,
.markdown-body h3:hover .anchor,
.markdown-body h4:hover .anchor,
.markdown-body h5:hover .anchor,
.markdown-body h6:hover .anchor {
  text-decoration: none;
}

.markdown-body h1:hover .anchor .octicon-link,
.markdown-body h2:hover .anchor .octicon-link,
.markdown-body h3:hover .anchor .octicon-link,
.markdown-body h4:hover .anchor .octicon-link,
.markdown-body h5:hover .anchor .octicon-link,
.markdown-body h6:hover .anchor .octicon-link {
  visibility: visible;
}

.markdown-body h1 tt,
.markdown-body h1 code,
.markdown-body h2 tt,
.markdown-body h2 code,
.markdown-body h3 tt,
.markdown-body h3 code,
.markdown-body h4 tt,
.markdown-body h4 code,
.markdown-body h5 tt,
.markdown-body h5 code,
.markdown-body h6 tt,
.markdown-body h6 code {
  padding: 0 .2em;
  font-size: inherit;
}

.markdown-body summary h1,
.markdown-body summary h2,
.markdown-body summary h3,
.markdown-body summary h4,
.markdown-body summary h5,
.markdown-body summary h6 {
  display: inline-block;
}

.markdown-body summary h1 .anchor,
.markdown-body summary h2 .anchor,
.markdown-body summary h3 .anchor,
.markdown-body summary h4 .anchor,
.markdown-body summary h5 .anchor,
.markdown-body summary h6 .anchor {
  margin-left: -40px;
}

.markdown-body summary h1,
.markdown-body summary h2 {
  padding-bottom: 0;
  border-bottom: 0;
}

.markdown-body ul.no-list,
.markdown-body ol.no-list {
  padding: 0;
  list-style-type: none;
}

.markdown-body ol[type="a s"] {
  list-style-type: lower-alpha;
}

.markdown-body ol[type="A s"] {
  list-style-type: upper-alpha;
}

.markdown-body ol[type="i s"] {
  list-style-type: lower-roman;
}

.markdown-body ol[type="I s"] {
  list-style-type: upper-roman;
}

.markdown-body ol[type="1"] {
  list-style-type: decimal;
}

.markdown-body div>ol:not([type]) {
  list-style-type: decimal;
}

.markdown-body ul ul,
.markdown-body ul ol,
.markdown-body ol ol,
.markdown-body ol ul {
  margin-top: 0;
  margin-bottom: 0;
}

.markdown-body li>p {
  margin-top: 16px;
}

.markdown-body li+li {
  margin-top: .25em;
}

.markdown-body dl {
  padding: 0;
}

.markdown-body dl dt {
  padding: 0;
  margin-top: 16px;
  font-size: 1em;
  font-style: italic;
  font-weight: var(--base-text-weight-semibold, 600);
}

.markdown-body dl dd {
  padding: 0 16px;
  margin-bottom: 16px;
}

.markdown-body table th {
  font-weight: var(--base-text-weight-semibold, 600);
}

.markdown-body table th,
.markdown-body table td {
  padding: 6px 13px;
  border: 1px solid var(--borderColor-default);
}

.markdown-body table td>:last-child {
  margin-bottom: 0;
}

.markdown-body table tr {
  background-color: var(--bgColor-default);
  border-top: 1px solid var(--borderColor-muted);
}

.markdown-body table tr:nth-child(2n) {
  background-color: var(--bgColor-muted);
}

.markdown-body table img {
  background-color: transparent;
}

.markdown-body img[align=right] {
  padding-left: 20px;
}

.markdown-body img[align=left] {
  padding-right: 20px;
}

.markdown-body .emoji {
  max-width: none;
  vertical-align: text-top;
  background-color: transparent;
}

.markdown-body span.frame {
  display: block;
  overflow: hidden;
}

.markdown-body span.frame>span {
  display: block;
  float: left;
  width: auto;
  padding: 7px;
  margin: 13px 0 0;
  overflow: hidden;
  border: 1px solid var(--borderColor-default);
}

.markdown-body span.frame span img {
  display: block;
  float: left;
}

.markdown-body span.frame span span {
  display: block;
  padding: 5px 0 0;
  clear: both;
  color: var(--fgColor-default);
}

.markdown-body span.align-center {
  display: block;
  overflow: hidden;
  clear: both;
}

.markdown-body span.align-center>span {
  display: block;
  margin: 13px auto 0;
  overflow: hidden;
  text-align: center;
}

.markdown-body span.align-center span img {
  margin: 0 auto;
  text-align: center;
}

.markdown-body span.align-right {
  display: block;
  overflow: hidden;
  clear: both;
}

.markdown-body span.align-right>span {
  display: block;
  margin: 13px 0 0;
  overflow: hidden;
  text-align: right;
}

.markdown-body span.align-right span img {
  margin: 0;
  text-align: right;
}

.markdown-body span.float-left {
  display: block;
  float: left;
  margin-right: 13px;
  overflow: hidden;
}

.markdown-body span.float-left span {
  margin: 13px 0 0;
}

.markdown-body span.float-right {
  display: block;
  float: right;
  margin-left: 13px;
  overflow: hidden;
}

.markdown-body span.float-right>span {
  display: block;
  margin: 13px auto 0;
  overflow: hidden;
  text-align: right;
}

.markdown-body code,
.markdown-body tt {
  padding: .2em .4em;
  margin: 0;
  font-size: 85%;
  white-space: break-spaces;
  background-color: var(--bgColor-neutral-muted);
  border-radius: 6px;
}

.markdown-body code br,
.markdown-body tt br {
  display: none;
}

.markdown-body del code {
  text-decoration: inherit;
}

.markdown-body samp {
  font-size: 85%;
}

.markdown-body pre code {
  font-size: 100%;
}

.markdown-body pre>code {
  padding: 0;
  margin: 0;
  word-break: normal;
  white-space: pre;
  background: transparent;
  border: 0;
}

.markdown-body .highlight {
  margin-bottom: 16px;
}

.markdown-body .highlight pre {
  margin-bottom: 0;
  word-break: normal;
}

.markdown-body .highlight pre,
.markdown-body pre {
  padding: 16px;
  overflow: auto;
  font-size: 85%;
  line-height: 1.45;
  color: var(--fgColor-default);
  background-color: var(--bgColor-muted);
  border-radius: 6px;
}

.markdown-body pre code,
.markdown-body pre tt {
  display: inline;
  max-width: auto;
  padding: 0;
  margin: 0;
  overflow: visible;
  line-height: inherit;
  word-wrap: normal;
  background-color: transparent;
  border: 0;
}

.markdown-body .csv-data td,
.markdown-body .csv-data th {
  padding: 5px;
  overflow: hidden;
  font-size: 12px;
  line-height: 1;
  text-align: left;
  white-space: nowrap;
}

.markdown-body .csv-data .blob-num {
  padding: 10px 8px 9px;
  text-align: right;
  background: var(--bgColor-default);
  border: 0;
}

.markdown-body .csv-data tr {
  border-top: 0;
}

.markdown-body .csv-data th {
  font-weight: var(--base-text-weight-semibold, 600);
  background: var(--bgColor-muted);
  border-top: 0;
}

.markdown-body [data-footnote-ref]::before {
  content: "[";
}

.markdown-body [data-footnote-ref]::after {
  content: "]";
}

.markdown-body .footnotes {
  font-size: 12px;
  color: var(--fgColor-muted);
  border-top: 1px solid var(--borderColor-default);
}

.markdown-body .footnotes ol {
  padding-left: 16px;
}

.markdown-body .footnotes ol ul {
  display: inline-block;
  padding-left: 16px;
  margin-top: 16px;
}

.markdown-body .footnotes li {
  position: relative;
}

.markdown-body .footnotes li:target::before {
  position: absolute;
  top: -8px;
  right: -8px;
  bottom: -8px;
  left: -24px;
  pointer-events: none;
  content: "";
  border: 2px solid var(--borderColor-accent-emphasis);
  border-radius: 6px;
}

.markdown-body .footnotes li:target {
  color: var(--fgColor-default);
}

.markdown-body .footnotes .data-footnote-backref g-emoji {
  font-family: monospace;
}

.markdown-body .pl-c {
  color: var(--color-prettylights-syntax-comment);
}

.markdown-body .pl-c1,
.markdown-body .pl-s .pl-v {
  color: var(--color-prettylights-syntax-constant);
}

.markdown-body .pl-e,
.markdown-body .pl-en {
  color: var(--color-prettylights-syntax-entity);
}

.markdown-body .pl-smi,
.markdown-body .pl-s .pl-s1 {
  color: var(--color-prettylights-syntax-storage-modifier-import);
}

.markdown-body .pl-ent {
  color: var(--color-prettylights-syntax-entity-tag);
}

.markdown-body .pl-k {
  color: var(--color-prettylights-syntax-keyword);
}

.markdown-body .pl-s,
.markdown-body .pl-pds,
.markdown-body .pl-s .pl-pse .pl-s1,
.markdown-body .pl-sr,
.markdown-body .pl-sr .pl-cce,
.markdown-body .pl-sr .pl-sre,
.markdown-body .pl-sr .pl-sra {
  color: var(--color-prettylights-syntax-string);
}

.markdown-body .pl-v,
.markdown-body .pl-smw {
  color: var(--color-prettylights-syntax-variable);
}

.markdown-body .pl-bu {
  color: var(--color-prettylights-syntax-brackethighlighter-unmatched);
}

.markdown-body .pl-ii {
  color: var(--color-prettylights-syntax-invalid-illegal-text);
  background-color: var(--color-prettylights-syntax-invalid-illegal-bg);
}

.markdown-body .pl-c2 {
  color: var(--color-prettylights-syntax-carriage-return-text);
  background-color: var(--color-prettylights-syntax-carriage-return-bg);
}

.markdown-body .pl-sr .pl-cce {
  font-weight: bold;
  color: var(--color-prettylights-syntax-string-regexp);
}

.markdown-body .pl-ml {
  color: var(--color-prettylights-syntax-markup-list);
}

.markdown-body .pl-mh,
.markdown-body .pl-mh .pl-en,
.markdown-body .pl-ms {
  font-weight: bold;
  color: var(--color-prettylights-syntax-markup-heading);
}

.markdown-body .pl-mi {
  font-style: italic;
  color: var(--color-prettylights-syntax-markup-italic);
}

.markdown-body .pl-mb {
  font-weight: bold;
  color: var(--color-prettylights-syntax-markup-bold);
}

.markdown-body .pl-md {
  color: var(--color-prettylights-syntax-markup-deleted-text);
  background-color: var(--color-prettylights-syntax-markup-deleted-bg);
}

.markdown-body .pl-mi1 {
  color: var(--color-prettylights-syntax-markup-inserted-text);
  background-color: var(--color-prettylights-syntax-markup-inserted-bg);
}

.markdown-body .pl-mc {
  color: var(--color-prettylights-syntax-markup-changed-text);
  background-color: var(--color-prettylights-syntax-markup-changed-bg);
}

.markdown-body .pl-mi2 {
  color: var(--color-prettylights-syntax-markup-ignored-text);
  background-color: var(--color-prettylights-syntax-markup-ignored-bg);
}

.markdown-body .pl-mdr {
  font-weight: bold;
  color: var(--color-prettylights-syntax-meta-diff-range);
}

.markdown-body .pl-ba {
  color: var(--color-prettylights-syntax-brackethighlighter-angle);
}

.markdown-body .pl-sg {
  color: var(--color-prettylights-syntax-sublimelinter-gutter-mark);
}

.markdown-body .pl-corl {
  text-decoration: underline;
  color: var(--color-prettylights-syntax-constant-other-reference-link);
}

.markdown-body [role=button]:focus:not(:focus-visible),
.markdown-body [role=tabpanel][tabindex="0"]:focus:not(:focus-visible),
.markdown-body button:focus:not(:focus-visible),
.markdown-body summary:focus:not(:focus-visible),
.markdown-body a:focus:not(:focus-visible) {
  outline: none;
  box-shadow: none;
}

.markdown-body [tabindex="0"]:focus:not(:focus-visible),
.markdown-body details-dialog:focus:not(:focus-visible) {
  outline: none;
}

.markdown-body g-emoji {
  display: inline-block;
  min-width: 1ch;
  font-family: "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 1em;
  font-style: normal !important;
  font-weight: var(--base-text-weight-normal, 400);
  line-height: 1;
  vertical-align: -0.075em;
}

.markdown-body g-emoji img {
  width: 1em;
  height: 1em;
}

.markdown-body .task-list-item {
  list-style-type: none;
}

.markdown-body .task-list-item label {
  font-weight: var(--base-text-weight-normal, 400);
}

.markdown-body .task-list-item.enabled label {
  cursor: pointer;
}

.markdown-body .task-list-item+.task-list-item {
  margin-top: var(--base-size-4);
}

.markdown-body .task-list-item .handle {
  display: none;
}

.markdown-body .task-list-item-checkbox {
  margin: 0 .2em .25em -1.4em;
  vertical-align: middle;
}

.markdown-body .contains-task-list:dir(rtl) .task-list-item-checkbox {
  margin: 0 -1.6em .25em .2em;
}

.markdown-body .contains-task-list {
  position: relative;
}

.markdown-body .contains-task-list:hover .task-list-item-convert-container,
.markdown-body .contains-task-list:focus-within .task-list-item-convert-container {
  display: block;
  width: auto;
  height: 24px;
  overflow: visible;
  clip: auto;
}

.markdown-body ::-webkit-calendar-picker-indicator {
  filter: invert(50%);
}

.markdown-body .markdown-alert {
  padding: var(--base-size-8) var(--base-size-16);
  margin-bottom: var(--base-size-16);
  color: inherit;
  border-left: .25em solid var(--borderColor-default);
}

.markdown-body .markdown-alert>:first-child {
  margin-top: 0;
}

.markdown-body .markdown-alert>:last-child {
  margin-bottom: 0;
}

.markdown-body .markdown-alert .markdown-alert-title {
  display: flex;
  font-weight: var(--base-text-weight-medium, 500);
  align-items: center;
  line-height: 1;
}

.markdown-body .markdown-alert.markdown-alert-note {
  border-left-color: var(--borderColor-accent-emphasis);
}

.markdown-body .markdown-alert.markdown-alert-note .markdown-alert-title {
  color: var(--fgColor-accent);
}

.markdown-body .markdown-alert.markdown-alert-important {
  border-left-color: var(--borderColor-done-emphasis);
}

.markdown-body .markdown-alert.markdown-alert-important .markdown-alert-title {
  color: var(--fgColor-done);
}

.markdown-body .markdown-alert.markdown-alert-warning {
  border-left-color: var(--borderColor-attention-emphasis);
}

.markdown-body .markdown-alert.markdown-alert-warning .markdown-alert-title {
  color: var(--fgColor-attention);
}

.markdown-body .markdown-alert.markdown-alert-tip {
  border-left-color: var(--borderColor-success-emphasis);
}

.markdown-body .markdown-alert.markdown-alert-tip .markdown-alert-title {
  color: var(--fgColor-success);
}

.markdown-body .markdown-alert.markdown-alert-caution {
  border-left-color: var(--borderColor-danger-emphasis);
}

.markdown-body .markdown-alert.markdown-alert-caution .markdown-alert-title {
  color: var(--fgColor-danger);
}

.markdown-body>*:first-child>.heading-element:first-child {
  margin-top: 0 !important;
}
#+end_src
